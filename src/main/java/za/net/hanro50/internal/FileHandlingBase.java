package za.net.hanro50.internal;

import static za.net.hanro50.debug.Log.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;

import za.net.hanro50.debug.Log_Ignore;
import za.net.hanro50.files.FIleUtil;

/**
 * The base of every file handling object within this library. If you wish to
 * use this class. Consider using {@link za.net.hanro50.files.FileObj FileObj}
 * 
 * @author hanro
 *
 */
@Log_Ignore()//Ignored to ease debugging
public class FileHandlingBase extends File {
	/**
	 * 
	 */
	protected FIleUtil FU;
	private static final long serialVersionUID = 5178200995927559673L;

	protected FileHandlingBase(File file,FIleUtil FU) {
		super(file.toURI());
		this.FU =FU;
	}

	protected FileHandlingBase(String ClassPath, String Path, String FileName, String FileExtension,FIleUtil FU) {
		super(ClassPath + Path + FIleUtil.SafeStr(FileName)
				+ (FIleUtil.SafeStr(FileExtension).length() > 0 ? "." + FIleUtil.SafeStr(FileExtension) : ""));
		this.FU =FU;
	}

	protected FileHandlingBase(String Path, String FileName, String FileExtension,FIleUtil FU) {
		this(FU.getDefaultClassPath(), Path, FileName, FileExtension,FU);
	}

	/**
	 * Write a collection of strings to a file. Each string will be separated by a
	 * line break;
	 * 
	 * @param in The collection of strings to write to a file
	 * @throws IOException could not save the file.
	 */
	protected void write(String... in) throws IOException {
		if (in.length < 1)
			return;

		rep("Writing: " + this.getPath() + '\n');
		if (!this.getParentFile().exists())
			this.getParentFile().mkdir();
		if (!this.exists()) {
			if (!this.createNewFile()) {
				throw new IOException("Could not save " + this.getPath());
			}
		}

		StringBuilder T = new StringBuilder();
		for (String s : in) {
			T.append(s).append("\n");
		}

		FileWriter writer = new FileWriter(this);

		writer.write(T.toString());
		writer.close();
	}

	/**
	 * Reads a file and returns a string Array.
	 * 
	 * @return The data from the file read into a string array
	 * @throws FileNotFoundException if the file cannot be found
	 * @throws IOException if the OS stops us from reading the file itself
	 */
	protected String[] read() throws IOException {
		FileInputStream stream;
		if (this.exists() && this.canRead()) {
			stream = new FileInputStream(this);
			return FIleUtil.readStream(stream);
		} else if (!this.exists()) {
			err("Cannot find File " + this.getPath());
			throw new FileNotFoundException("Cannot find File " + this.getPath());
		} else {
			err("File is not readable");
			throw new IOException("File is not readable");
		}
	}

	/**
	 * Reads a file and returns a string
	 * 
	 * @param Separator The character to append the elements in the String array
	 *                  generated by {@link #read()} function.
	 * @return The data from the file in string form
	 * @throws FileNotFoundException thrown if the file could not be found
	 * @throws IOException           thrown if the file could not be read
	 */
	protected String read(String Separator) throws FileNotFoundException, IOException {
		StringBuilder result = new StringBuilder();
		String[] content = read();
		if (content.length <1) return "";
		for (int i = 0; i < content.length - 1; i++) {
			result.append(content[i]).append(Separator);
		}
		result.append(content[content.length - 1]);
		return result.toString();
	}

	

}
